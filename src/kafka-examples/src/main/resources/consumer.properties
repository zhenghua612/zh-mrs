# ========================================
# Kafka 消费者配置文件
# 用于连接Docker中的Kafka集群
# ========================================

# Kafka Broker地址列表
# 格式: host1:port1,host2:port2,host3:port3
# 请根据你的Docker集群实际情况修改主机名和端口
bootstrap.servers=localhost:9092,localhost:9093,localhost:9094

# 消费者组ID - 同一组的消费者共同消费Topic
# 不同组的消费者可以独立消费同一个Topic
group.id=DemoConsumer

# Key反序列化器 - 将字节转换为消息Key
key.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Value反序列化器 - 将字节转换为消息内容
value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# 安全协议类型
# PLAINTEXT: 不加密，不认证（适合学习和开发环境）
security.protocol=PLAINTEXT

# ========================================
# 可选配置 - 消费者行为参数
# ========================================

# 是否自动提交offset
# true: 自动提交（简单，但可能重复消费或丢失消息）
# false: 手动提交（更可控，但需要自己管理）
enable.auto.commit=true

# 自动提交offset的时间间隔（毫秒）
auto.commit.interval.ms=1000

# 会话超时时间（毫秒）
# 如果消费者在这个时间内没有发送心跳，会被认为已死亡
session.timeout.ms=30000

# 心跳间隔时间（毫秒）
# 消费者向协调器发送心跳的频率
heartbeat.interval.ms=3000

# 一次poll()调用返回的最大记录数
max.poll.records=500

# 两次poll()调用的最大间隔（毫秒）
# 超过这个时间会触发rebalance
max.poll.interval.ms=300000

# 从哪里开始消费
# earliest: 从最早的消息开始
# latest: 从最新的消息开始
# none: 如果没有找到offset则抛出异常
auto.offset.reset=latest

# 请求超时时间（毫秒）
request.timeout.ms=30000
